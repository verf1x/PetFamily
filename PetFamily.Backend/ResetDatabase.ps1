param(
    [string]$InfrastructureProject = ".\src\PetFamily.Infrastructure\",
    [string]$StartupProject        = ".\src\PetFamily.API\",
    [string]$MigrationName         = "Initial"
)

Write-Host "ðŸ—‘  Attempting to drop database (if it exists)â€¦"
try {
    dotnet ef database drop `
        -p $InfrastructureProject `
        -s $StartupProject `
        --force `
        --no-build  # optional, to avoid rebuilding every time
}
catch [Npgsql.PostgresException] {
    if ($_.SqlState -eq '3D000') {
        Write-Host "   Database not found â€” skipping drop."
    }
    else {
        throw
    }
}

Write-Host "ðŸ“‚ Removing old Migrations folder (if it exists)â€¦"
$MigrationsPath = Join-Path $InfrastructureProject "Migrations"
if (Test-Path $MigrationsPath) {
    Remove-Item $MigrationsPath -Recurse -Force
    Write-Host "   Deleted: $MigrationsPath"
}
else {
    Write-Host "   No Migrations folder found."
}

Write-Host "âž• Adding new migration '$MigrationName'â€¦"
dotnet ef migrations add $MigrationName `
    -p $InfrastructureProject `
    -s $StartupProject

Write-Host "ðŸš€ Applying migrations (and creating database if it doesnâ€™t exist)â€¦"
dotnet ef database update `
  -p $InfrastructureProject `
  -s $StartupProject `
  --verbose

Write-Host "âœ… Done!"

Write-Host "ðŸ“œ Generating SQL script for migrationsâ€¦"
dotnet ef migrations script `
    -p $InfrastructureProject `
    -s $StartupProject
